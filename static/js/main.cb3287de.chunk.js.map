{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","MainMenu","props","milestones","awards","whichScreen","react_default","a","createElement","className","class","id","type","onClick","buttonClick","document","getElementById","checked","data","slice","filter","e","isVenus","map","d","idx","name","description","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomizeButton","setState","currentScreen","state","screen","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cb3287de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport data from './data.json';\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction check() {\n  return (document.getElementById(\"includeVenus\").checked);\n}\n\nfunction MainMenu(props) {\n  var milestones = [];\n  var awards = []\n  if (props.whichScreen === 'mainMenu') {\n    return (\n      <div className=\"App-main-menu\">\n        <div className=\"App-header\">\n         <h1 className=\"App-title\">\n           Terraforming Mars\n         </h1>\n         <h3>\n           Milestone and Awards Randomizer\n         </h3>\n        </div>\n\n        <div className=\"App-button\">\n          <div className=\"wrapper\">\n            <p>Include Venus Next?</p>\n            <label class=\"switch\">\n              <input id=\"includeVenus\" type=\"checkbox\" />\n              <span class=\"slider\"></span>\n            </label>\n          </div>\n          <div className=\"wrapper\">\n            <button onClick={props.buttonClick}>Randomize!</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  else if (props.whichScreen === 'randomizeScreen') {\n    if (!check()) {\n      milestones = shuffle(data.milestones).filter(e => e.isVenus == null).slice(0, 5);\n      awards = shuffle(data.awards).filter(e => e.isVenus == null).slice(0, 5);\n    }\n    else {\n      milestones = shuffle(data.milestones).slice(0, 6);\n      awards = shuffle(data.awards).slice(0, 6);\n    }\n    return (\n      <div className=\"randomize-screen\">\n        <h2>Milestones</h2>\n        <div className=\"am-list\">\n          {milestones.map(function(d, idx){\n          return (<div className=\"award-milestone\"><p className=\"title\">{d.name}</p><div className=\"description\">{d.description}</div></div>)\n          })}\n        </div>\n        <h2>Awards</h2>\n        <div className=\"am-list\">\n          {awards.map(function(d, idx){\n          return (<div className=\"award-milestone\"><p className=\"title\">{d.name}</p><div className=\"description\">{d.description}</div></div>)\n          })} \n        </div>         \n      </div>\n    );\n  }\n  else return(null);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScreen: 'mainMenu'\n    }\n  }\n\n  randomizeButton = () => {\n\n    this.setState({\n      currentScreen: 'randomizeScreen'\n    });\n  }\n    \n  render() {\n    const screen = this.state.currentScreen;\n    return (\n      <div className=\"App\">\n        <MainMenu \n          whichScreen={screen} \n          buttonClick={this.randomizeButton}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}