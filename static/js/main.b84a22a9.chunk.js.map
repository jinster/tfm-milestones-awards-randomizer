{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","MainMenu","props","milestones","data","slice","awards","whichScreen","react_default","a","createElement","className","onClick","buttonClick","map","d","idx","key","name","description","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomizeButton","setState","currentScreen","state","selectedAwards","selectedMilestones","awardsFunded","milestonesReached","options","screen","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b84a22a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport data from './data.json';\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction MainMenu(props) {\n  const milestones = shuffle(data.milestones).slice(0, 5);\n  const awards = shuffle(data.awards).slice(0, 5);\n  if (props.whichScreen === 'mainMenu') {\n    return (\n      <div className=\"App-main-menu\">\n        <div className=\"App-header\">\n         <h1 className=\"App-title\">\n           Terraforming Mars\n         </h1>\n         <h3>\n           Milestone and Awards Randomizer\n         </h3>\n        </div>\n\n        <div className=\"App-button\">\n          <button onClick={props.buttonClick}>Randomize!</button>\n        </div>\n      </div>\n    );\n  }\n  else if (props.whichScreen === 'randomizeScreen') {\n    return (\n      <div>\n          <h1>Awards</h1>\n          {awards.map(function(d, idx){\n         return (<li key={idx}>{d.name}<br/>{d.description}</li>)\n       })}\n          <br/><br/>\n          <h1>Milestones</h1>\n          {milestones.map(function(d, idx){\n         return (<li key={idx}>{d.name}<br/>{d.description}<br/></li>)\n       })}\n        </div>\n    );\n  }\n  else return(null);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScreen: 'mainMenu',\n      selectedAwards: [],\n      selectedMilestones: [],\n      awardsFunded: [],\n      milestonesReached: [],\n      options: []\n    }\n  }\n\n  randomizeButton = () => {\n\n    this.setState({\n      currentScreen: 'randomizeScreen'\n    });\n  }\n    \n  render() {\n    const screen = this.state.currentScreen;\n    return (\n      <div className=\"App\">\n        <MainMenu \n          whichScreen={screen} \n          buttonClick={this.randomizeButton}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}